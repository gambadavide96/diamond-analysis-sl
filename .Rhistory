abline(lm(Diamonds$price ~ Diamonds$carat, data = Diamonds), col = "red")
plot(Diamonds$depth_percentage, Diamonds$price,
main = "Depth percentage vs Price",
xlab = "Depth percentage",
ylab = "Price ($)")
abline(lm(Diamonds$price ~ Diamonds$depth_percentage,
data = Diamonds), col = "red")
summary(lm(Diamonds$price ~ Diamonds$depth_percentage, data = Diamonds))
plot(Diamonds$table, Diamonds$price,
main = "Table vs Price",
xlab = "Table",
ylab = "Price ($)")
plot(Diamonds$table, Diamonds$price,
main = "Table vs Price",
xlab = "Table",
ylab = "Price ($)")
summary(lm(Diamonds$price ~ Diamonds$table, data = Diamonds))
plot(Diamonds$length, Diamonds$price,
main = "Length vs Price",
xlab = "Lenght (mm)",
ylab = "Price ($)")
abline(lm(Diamonds$price ~ Diamonds$length, data = Diamonds), col = "red")
plot(Diamonds$width, Diamonds$price,
main = "Width vs Price",
xlab = "Width (mm)",
ylab = "Price ($)")
plot(Diamonds$depth, Diamonds$price,
main = "Depth vs Price",
xlab = "Depth (mm)",
ylab = "Price ($)")
?percentile
?quantile
################################################################################
######################################### Setting Dataset
################################################################################
Diamonds <- read.table("diamonds.csv", header = TRUE,
sep = ",",quote = "\"", fileEncoding = "UTF-8")
Diamonds <- subset(Diamonds , select = - X)
colnames(Diamonds)[5] = "depth_percentage"
colnames(Diamonds)[8] = "length"
colnames(Diamonds)[9] = "width"
colnames(Diamonds)[10] = "depth"
detect_outlier <- function(x) {
Quantile1 <- quantile(x, probs=.15)
Quantile3 <- quantile(x, probs=.85)
IQR = Quantile3 - Quantile1
x > Quantile3 + (IQR*1.5) | x < Quantile1 - (IQR*1.5)
}
remove_outlier <- function(dataframe,columns=names(dataframe)) {
for (col in columns) {
dataframe <- dataframe[!detect_outlier(dataframe[[col]]), ]
}
print("Remove outliers")
print(dataframe)
}
Diamonds <- remove_outlier(Diamonds, c('carat', 'depth_percentage', 'table', 'price',
"length", 'width', "depth"))
plot(Diamonds$carat, Diamonds$price,
main = "Carat vs Price",
xlab = "Carat",
ylab = "Price ($)")
plot(Diamonds$table, Diamonds$price,
main = "Table vs Price",
xlab = "Table",
ylab = "Price ($)")
plot(Diamonds$length, Diamonds$price,
main = "Length vs Price",
xlab = "Lenght (mm)",
ylab = "Price ($)")
plot(Diamonds$depth, Diamonds$price,
main = "Depth vs Price",
xlab = "Depth (mm)",
ylab = "Price ($)")
################################################################################
######################################### Setting Dataset
################################################################################
Diamonds <- read.table("diamonds.csv", header = TRUE,
sep = ",",quote = "\"", fileEncoding = "UTF-8")
Diamonds <- subset(Diamonds , select = - X)
colnames(Diamonds)[5] = "depth_percentage"
colnames(Diamonds)[8] = "length"
colnames(Diamonds)[9] = "width"
colnames(Diamonds)[10] = "depth"
detect_outlier <- function(x) {
Quantile1 <- quantile(x, probs=.20)
Quantile3 <- quantile(x, probs=.80)
IQR = Quantile3 - Quantile1
x > Quantile3 + (IQR*1.5) | x < Quantile1 - (IQR*1.5)
}
remove_outlier <- function(dataframe,columns=names(dataframe)) {
for (col in columns) {
dataframe <- dataframe[!detect_outlier(dataframe[[col]]), ]
}
print("Remove outliers")
print(dataframe)
}
Diamonds <- remove_outlier(Diamonds, c('carat', 'depth_percentage', 'table', 'price',
"length", 'width', "depth"))
plot(Diamonds$carat, Diamonds$price,
main = "Carat vs Price",
xlab = "Carat",
ylab = "Price ($)")
plot(Diamonds$length, Diamonds$price,
main = "Length vs Price",
xlab = "Lenght (mm)",
ylab = "Price ($)")
plot(Diamonds$width, Diamonds$price,
main = "Width vs Price",
xlab = "Width (mm)",
ylab = "Price ($)")
plot(Diamonds$depth, Diamonds$price,
main = "Depth vs Price",
xlab = "Depth (mm)",
ylab = "Price ($)")
hist(Diamonds$length, 40 , xlab = "Length (mm)",  main = "Length distribution")
hist(Diamonds$depth, 50 , xlab = "Depth (mm)",  main = "Depth distribution")
################################################################################
######################################### Setting Dataset
################################################################################
Diamonds <- read.table("diamonds.csv", header = TRUE,
sep = ",",quote = "\"", fileEncoding = "UTF-8")
Diamonds <- subset(Diamonds , select = - X)
colnames(Diamonds)[5] = "depth_percentage"
colnames(Diamonds)[8] = "length"
colnames(Diamonds)[9] = "width"
colnames(Diamonds)[10] = "depth"
detect_outlier <- function(x) {
Quantile1 <- quantile(x, probs=.20)
Quantile3 <- quantile(x, probs=.80)
IQR = Quantile3 - Quantile1
x > Quantile3 + (IQR*1.5) | x < Quantile1 - (IQR*1.5)
}
remove_outlier <- function(dataframe,columns=names(dataframe)) {
new_dataframe <- data.frame()  # Creiamo un nuovo dataframe vuoto
for (col in columns) {
outlier_indices <- detect_outlier(dataframe[[col]])  # Troviamo gli indici degli outlier
# Aggiungiamo solo le righe che non contengono outlier al nuovo dataframe
new_dataframe <- rbind(new_dataframe, dataframe[!outlier_indices, ])
}
print("Remove outliers")
print(dataframe)
}
remove_outlier <- function(dataframe,columns=names(dataframe)) {
new_dataframe <- data.frame()  # Creiamo un nuovo dataframe vuoto
for (col in columns) {
outlier_indices <- detect_outlier(dataframe[[col]])  # Troviamo gli indici degli outlier
# Aggiungiamo solo le righe che non contengono outlier al nuovo dataframe
new_dataframe <- rbind(new_dataframe, dataframe[!outlier_indices, ])
}
print("Remove outliers")
}
Diamonds_new <- remove_outlier(Diamonds, c('carat', 'depth_percentage', 'table', 'price',
"length", 'width', "depth"))
remove_outlier <- function(dataframe,columns=names(dataframe)) {
new_dataframe <- data.frame()  # Creiamo un nuovo dataframe vuoto
for (col in columns) {
outlier_indices <- detect_outlier(dataframe[[col]])  # Troviamo gli indici degli outlier
# Aggiungiamo solo le righe che non contengono outlier al nuovo dataframe
new_dataframe <- rbind(new_dataframe, dataframe[!outlier_indices, ])
}
print("Remove outliers")
return(new_dataframe)
}
Diamonds_new <- remove_outlier(Diamonds, c('carat', 'depth_percentage', 'table', 'price',
"length", 'width', "depth"))
remove_outlier <- function(dataframe,columns=names(dataframe)) {
for (col in columns) {
dataframe <- dataframe[!detect_outlier(dataframe[[col]]), ]
}
print("Remove outliers")
print(dataframe)
}
Diamonds <- remove_outlier(Diamonds, c('carat', 'depth_percentage', 'table', 'price',
"length", 'width', "depth"))
################################################################################
######################################### Setting Dataset
################################################################################
Diamonds <- read.table("diamonds.csv", header = TRUE,
sep = ",",quote = "\"", fileEncoding = "UTF-8")
Diamonds <- subset(Diamonds , select = - X)
colnames(Diamonds)[5] = "depth_percentage"
colnames(Diamonds)[8] = "length"
colnames(Diamonds)[9] = "width"
colnames(Diamonds)[10] = "depth"
Diamonds$cut <- factor(Diamonds$cut)
Diamonds$color <- factor(Diamonds$color)
Diamonds$clarity <- factor(Diamonds$clarity)
View(Diamonds)
detect_outlier <- function(x) {
Quantile1 <- quantile(x, probs=.20)
Quantile3 <- quantile(x, probs=.8)
IQR = Quantile3 - Quantile1
x > Quantile3 + (IQR*1.5) | x < Quantile1 - (IQR*1.5)
}
remove_outlier <- function(dataframe,columns=names(dataframe)) {
for (col in columns) {
dataframe <- dataframe[!detect_outlier(dataframe[[col]]), ]
}
print("Remove outliers")
}
Diamonds <- remove_outlier(Diamonds, c('carat', 'depth_percentage', 'table', 'price',
"length", 'width', "depth"))
################################################################################
######################################### Setting Dataset
################################################################################
Diamonds <- read.table("diamonds.csv", header = TRUE,
sep = ",",quote = "\"", fileEncoding = "UTF-8")
Diamonds <- subset(Diamonds , select = - X)
colnames(Diamonds)[5] = "depth_percentage"
colnames(Diamonds)[8] = "length"
colnames(Diamonds)[9] = "width"
colnames(Diamonds)[10] = "depth"
detect_outlier <- function(x) {
Quantile1 <- quantile(x, probs=.20)
Quantile3 <- quantile(x, probs=.80)
IQR = Quantile3 - Quantile1
x > Quantile3 + (IQR*1.5) | x < Quantile1 - (IQR*1.5)
}
remove_outlier <- function(dataframe,columns=names(dataframe)) {
for (col in columns) {
dataframe <- dataframe[!detect_outlier(dataframe[[col]]), ]
}
print("Remove outliers")
}
Diamonds <- remove_outlier(Diamonds, c('carat', 'depth_percentage', 'table', 'price',
"length", 'width', "depth"))
################################################################################
######################################### Setting Dataset
################################################################################
Diamonds <- read.table("diamonds.csv", header = TRUE,
sep = ",",quote = "\"", fileEncoding = "UTF-8")
Diamonds <- subset(Diamonds , select = - X)
colnames(Diamonds)[5] = "depth_percentage"
colnames(Diamonds)[8] = "length"
colnames(Diamonds)[9] = "width"
colnames(Diamonds)[10] = "depth"
detect_outlier <- function(x) {
Quantile1 <- quantile(x, probs=.20)
Quantile3 <- quantile(x, probs=.80)
IQR = Quantile3 - Quantile1
x > Quantile3 + (IQR*1.5) | x < Quantile1 - (IQR*1.5)
}
remove_outlier <- function(dataframe,columns=names(dataframe)) {
for (col in columns) {
dataframe <- dataframe[!detect_outlier(dataframe[[col]]), ]
}
print("Remove outliers")
print(dataframe)
}
Diamonds <- remove_outlier(Diamonds, c('carat', 'depth_percentage', 'table', 'price',
"length", 'width', "depth"))
# after standirzation lets check the outliers
par(mfrow = c(1,1))
boxplot(scale(Diamonds))$out
boxplot(scale(Diamonds,c('carat', 'depth_percentage', 'table', 'price',
"length", 'width', "depth")))$out
boxplot(scale(Diamonds,c('carat', 'depth_percentage', 'table', 'price',
"length", 'width', "depth")))
?scale
boxplot(scale(Diamonds$carat, Diamonds$depth_percentage, Diamonds$table,
Diamonds$price,
Diamonds$length,
Diamonds$width,
Diamonds$depth))$out
boxplot(scale(c(Diamonds$carat, Diamonds$depth_percentage, Diamonds$table,
Diamonds$price,
Diamonds$length,
Diamonds$width,
Diamonds$depth)))$out
?scale
scale(Diamonds$price)
Diamonds <- scale(c(Diamonds$carat, Diamonds$depth_percentage, Diamonds$table,
Diamonds$price,
Diamonds$length,
Diamonds$width,
Diamonds$depth))
################################################################################
######################################### Setting Dataset
################################################################################
Diamonds <- read.table("diamonds.csv", header = TRUE,
sep = ",",quote = "\"", fileEncoding = "UTF-8")
Diamonds <- subset(Diamonds , select = - X)
colnames(Diamonds)[5] = "depth_percentage"
colnames(Diamonds)[8] = "length"
colnames(Diamonds)[9] = "width"
colnames(Diamonds)[10] = "depth"
detect_outlier <- function(x) {
Quantile1 <- quantile(x, probs=.20)
Quantile3 <- quantile(x, probs=.80)
IQR = Quantile3 - Quantile1
x > Quantile3 + (IQR*1.5) | x < Quantile1 - (IQR*1.5)
}
remove_outlier <- function(dataframe,columns=names(dataframe)) {
for (col in columns) {
dataframe <- dataframe[!detect_outlier(dataframe[[col]]), ]
}
print("Remove outliers")
print(dataframe)
}
Diamonds <- remove_outlier(Diamonds, c('carat', 'depth_percentage', 'table', 'price',
"length", 'width', "depth"))
Diamonds$price <-scale(Diamonds$price)
Diamonds$carat <- scale(Diamonds$carat)
Diamonds$carat <- scale(Diamonds$carat)
Diamonds$depth_percentage <- scale(Diamonds$depth_percentage)
Diamonds$table <- scale(Diamonds$table)
Diamonds$lenght <- scale(Diamonds$length)
Diamonds$width <- scale(Diamonds$width)
Diamonds$depth <- scale(Diamonds$depth)
Diamonds$lenght <- scale(Diamonds$length)
Diamonds$length <- scale(Diamonds$length)
Diamonds <- subset(Diamonds, select = -lenght)
hist(Diamonds$carat, 40 ,
xlab = "Carat",  main = "Carat distribution")
barplot(table(Diamonds$cut), xlab = "Cut",
ylab = "Frequency", main = "Cut distribution")
barplot(table(Diamonds$color), xlab = "Color",
ylab = "Frequency", main = "Color Distribution")
barplot(table(Diamonds$clarity), xlab = "Clarity",
ylab = "Frequency",main = "Clarity Distribution")
hist(Diamonds$depth_percentage, 50 , xlab = "Depth Percentage",
main = "Depth Percentage distribution")
hist(Diamonds$table, 40 , xlab = "Table",  main = "Table distribution")
hist(Diamonds$price, 40 , xlab = "Price ($)",  main = "Price distribution")
hist(Diamonds$length, 40 , xlab = "Length (mm)",  main = "Length distribution")
hist(Diamonds$width, 50 , xlab = "Width (mm)",  main = "Width distribution")
hist(Diamonds$depth, 50 , xlab = "Depth (mm)",  main = "Depth distribution")
plot(Diamonds$carat, Diamonds$price,
main = "Carat vs Price",
xlab = "Carat",
ylab = "Price ($)")
plot(Diamonds$cut, Diamonds$price,
main = "Cut vs Price",
xlab = "Cut",
ylab = "Price ($)")
Diamonds$cut <- factor(Diamonds$cut)
Diamonds$color <- factor(Diamonds$color)
Diamonds$clarity <- factor(Diamonds$clarity)
plot(Diamonds$cut, Diamonds$price,
main = "Cut vs Price",
xlab = "Cut",
ylab = "Price ($)")
#check outliers
boxplot(scale(Diamonds))$out
#check outliers
boxplot(Diamonds)$out
#check outliers
boxplot(Diamonds)
#check outliers
boxplot(Diamonds)
View(Diamonds)
#Regressione Lineare
lm <- lm(price ~ . , data = Diamonds)
summary(lm)
plot(Diamonds$carat, Diamonds$price,
main = "Carat vs Price",
xlab = "Carat",
ylab = "Price ($)")
summary(lm(Diamonds$price ~ Diamonds$depth_percentage, data = Diamonds))
abline(lm(Diamonds$price ~ Diamonds$carat, data = Diamonds), col = "red")
# clearing environment
rm(list = ls())
graphics.off()
data <- read.csv("Admissions.csv")
setwd("~/Desktop/Materiale Università/Laurea Magistrale/II Anno/Statistical Learning/progetti_extra/graduate_admission")
data <- read.csv("Admissions.csv")
View(data)
data <- data.frame(data[,2:9])
colnames(data)[1] = "GRE"
colnames(data)[2] = "TOEFL"
colnames(data)[3] = "UniRatings"
colnames(data)[8] = "Admit"
View(data)
# no nan colums
colSums(is.na(data))
par(mfrow = c(3,3))
plot(data$GRE,
data$Admit,
main = "GRE score vs Chance of Admit",
xlab = "GRE score",
ylab = "Chance of Admit")
par(mfrow = c(1,1))
plot(data$GRE,
data$Admit,
main = "GRE score vs Chance of Admit",
xlab = "GRE score",
ylab = "Chance of Admit")
abline(lm(data$Admit ~ data$GRE, data = mtcars), col = "blue")
plot(data$TOEFL,
data$Admit,
main = "TOEFL score vs Chance of Admit",
xlab = "TOEFL score",
ylab = "Chance of Admit")
abline(lm(data$Admit ~ data$TOEFL, data = mtcars), col = "blue")
plot(data$UniRatings,
data$Admit,
main = "UniRatings vs Chance of Admit",
xlab = "UniRatings",
ylab = "Chance of Admit")
plot(data$SOP,
data$Admit,
main = "SOP vs Chance of Admit",
xlab = "SOP",
ylab = "Chance of Admit")
abline(lm(data$Admit ~ data$SOP, data = mtcars), col = "blue")
plot(data$UniRatings,
data$Admit,
main = "UniRatings vs Chance of Admit",
xlab = "UniRatings",
ylab = "Chance of Admit")
abline(lm(data$Admit ~ data$UniRatings, data = mtcars), col = "blue")
plot(data$CGPA,
data$Admit,
main = "CGPA vs Chance of Admit",
xlab = "CGPA",
ylab = "Chance of Admit")
abline(lm(data$Admit ~ data$CGPA, data = mtcars), col = "blue")
plot(data$Research,
data$Admit,
main = "Research vs Chance of Admit",
xlab = "Research",
ylab = "Chance of Admit")
abline(lm(data$Admit ~ data$Research, data = mtcars), col = "blue")
library(ggplot2)
library(GGally)
par(mfrow = c(1,1))
cor_scores <- cor(data)
corrplot(cor_scores, method="number", type = 'lower')
install.packages("corrplot")      # Correlations
corrplot(cor_scores, method="number", type = 'lower')
library(corrplot)
corrplot(cor_scores, method="number", type = 'lower')
ggpairs(data)
detect_outlier <- function(x) {
Quantile1 <- quantile(x, probs=.25)
Quantile3 <- quantile(x, probs=.75)
IQR = Quantile3 - Quantile1
x > Quantile3 + (IQR*1.5) | x < Quantile1 - (IQR*1.5)
}
remove_outlier <- function(dataframe,columns=names(dataframe)) {
for (col in columns) {
dataframe <- dataframe[!detect_outlier(dataframe[[col]]), ]
}
print("Remove outliers")
print(dataframe)
}
data <- remove_outlier(data, c('GRE', 'TOEFL', 'UniRatings', 'SOP', "LOR", 'CGPA', "Research"))
data <- read.csv("Admissions.csv")
data <- data.frame(data[,2:9])
colnames(data)[1] = "GRE"
colnames(data)[2] = "TOEFL"
colnames(data)[3] = "UniRatings"
colnames(data)[8] = "Admit"
View(data)
detect_outlier <- function(x) {
Quantile1 <- quantile(x, probs=.25)
Quantile3 <- quantile(x, probs=.75)
IQR = Quantile3 - Quantile1
x > Quantile3 + (IQR*1.5) | x < Quantile1 - (IQR*1.5)
}
remove_outlier <- function(dataframe,columns=names(dataframe)) {
for (col in columns) {
dataframe <- dataframe[!detect_outlier(dataframe[[col]]), ]
}
print("Remove outliers")
print(dataframe)
}
data <- remove_outlier(data, c('GRE', 'TOEFL', 'UniRatings', 'SOP', "LOR", 'CGPA', "Research"))
# crate multiple dataset to fit later
data <- data %>% relocate(CGPA, .after=TOEFL)
boxplot(scale(data))$out
################################################################################
######################################### Setting Dataset
################################################################################
Diamonds <- read.table("diamonds.csv", header = TRUE,
sep = ",",quote = "\"", fileEncoding = "UTF-8")
setwd("~/Documents/GitHub/Statistical_Learning")
################################################################################
######################################### Setting Dataset
################################################################################
Diamonds <- read.table("diamonds.csv", header = TRUE,
sep = ",",quote = "\"", fileEncoding = "UTF-8")
Diamonds <- subset(Diamonds , select = - X)
colnames(Diamonds)[5] = "depth_percentage"
colnames(Diamonds)[8] = "length"
colnames(Diamonds)[9] = "width"
colnames(Diamonds)[10] = "depth"
View(Diamonds)
valori_cut <- c("Fair" = 1, "Good" = 2, "Very Good" = 3,
"Premium" = 4, "Ideal" = 5)
valori_cut[Diamonds$cut]
Diamonds$cut <- valori_cut[Diamonds$cut]
barplot(table(Diamonds$cut), xlab = "Cut",
ylab = "Frequency", main = "Cut distribution")
hist(Diamonds$cut, xlab = "Cut",
ylab = "Frequency", main = "Cut distribution")
barplot(table(Diamonds$cut), xlab = "Cut",
ylab = "Frequency", main = "Cut distribution")
hist(Diamonds$cut, xlab = "Cut",
ylab = "Frequency", main = "Cut distribution")
plot(Diamonds$cut, Diamonds$price,
main = "Cut vs Price",
xlab = "Cut",
ylab = "Price ($)")
abline(lm(Diamonds$price ~ Diamonds$cut, data = Diamonds), col = "red")
summary(lm(Diamonds$price ~ Diamonds$cut, data = Diamonds))
barplot(table(Diamonds$cut), xlab = "Cut",
ylab = "Frequency", main = "Cut distribution")
plot(Diamonds$cut, Diamonds$price,
main = "Cut vs Price",
xlab = "Cut",
ylab = "Price ($)")
